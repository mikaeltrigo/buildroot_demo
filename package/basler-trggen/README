Using the 'trggen' trigger generator driver
===========================================


1. Purpose of the trggen driver

Basler BCON cameras have the ability to aquire images when triggered by
an externally-generated signal applied to an input terminal dedicated
to this purpose, which is part of the camera's electrical interface. In
order to allow users to test-drive this function without requiring
additional equipment like H/W pulse generators, the trigger input can be
fed with a square-wave signal of suitable electrical characteristics
that is generated by the DevKit board itself. To this end, the driver
utilizes a hardware unit present on the Zynq-7000 SoC named TTC (triple
timer counter). For detailed information, see the Zynq-7000 User's
Manual.

By using the trggen driver, user-space programs can control the timing
of the trigger signal, as well as enabling or disabling it altogether.

In external trigger mode, the camera's exposure time can optionally be
controlled via the trigger pulse duration. Therefore, the driver also
allows for control of the trigger pulse duration. 


2. Basic driver theory

As mentioned above, the driver can generate a square-wave signal at the
camera's trigger input. A sixteen-bit counter counting cycles of a
constant time base clock is utilized to achieve this. Counting starts
at zero and continues up to a programmable value, at which point the
counter is reset and counting starts over. The signal output is set to
a high voltage level (indicating a logic 1) from the outset, and is
returned to a low level (logic 0) at some point where the counter
matches a value that is also programmable. The net effect is to
generate a periodic signal with programmable pulse period and duration.

The counter's input clock is derived from a fixed-clock timebase by
means of a programmable prescaler. The prescaler produces an output
frequency that equals the fixed input clock frequency divided by a
factor 2^^N, where N is an integer in the range [0..16]. The value N is
also programmable.

The driver also has a static data structure, readable by the user, that
contains all information necessary to do timing calculations and range
checks.


3. The IOCTL API

One way to control the trigger generator from a user-space program is to
use the ioctl() function provided by the standard C runtime. The driver
sets up a device file named '/dev/trggen0' (the '0' part could in
principle be changed to a different value, but that is beyond the scope
of this discussion). After opening the device file, the ioctl()
function can be used to access the driver's functions, using the IOCTL
function codes defined in the header file 'trggen.h':

TRGGEN_GET_SDATA    - read the driver's static data structure

TRGGEN_GET_SCALE
TRGGEN_SET_SCALE    - get/set the prescaling factor

TRGGEN_GET_PERIOD
TRGGEN_SET_PERIOD   - get/set the pulse period

TRGGEN_GET_EDGE_POS
TRGGEN_SET_EDGE_POS - get/set position of output high-to-low transition

TRGGEN_START        - start the trigger generator, enable output
TRGGEN_STOP         - stop the trigger generator, disable output


4. The sysfs API

An alternative way of accessing the driver's functions is through files
located in the device's sysfs directory. This is how the contents of
that directory look like:

root@microzed-zynq7:~# ls -l /sys/bus/platform/devices/f8001000.timer/
lrwxrwxrwx    1 root     root             0 Oct 24 22:57 driver -> ../../../../bus/platform/drivers/basler-trggen
-rw-r--r--    1 root     root          4096 Oct 24 22:57 driver_override
-rw-r--r--    1 root     root          4096 Oct 24 22:57 edge_pos
-r--r--r--    1 root     root          4096 Oct 24 22:57 modalias
lrwxrwxrwx    1 root     root             0 Oct 24 22:57 of_node -> ../../../../firmware/devicetree/base/amba/timer@f8001000
-rw-r--r--    1 root     root          4096 Oct 24 22:57 period
-rw-r--r--    1 root     root          4096 Oct 24 22:57 run
-rw-r--r--    1 root     root          4096 Oct 24 22:57 scale
-r--r--r--    1 root     root          4096 Oct 24 22:57 sdata
lrwxrwxrwx    1 root     root             0 Oct 24 22:57 subsystem -> ../../../../bus/platform
-rw-r--r--    1 root     root          4096 Jan  1  1970 uevent

The sysfs API to the trigger generator consists of the files 'sdata',
'scale', 'period', 'edge_pos', and 'run', the rest are standard entries
unrelated to the API. All those files' contents are ASCII data.

The 'sdata' file contains the same information that is also accessible
through the TRGGEN_GET_SDATA ioctl, only fomatted as an ASCII string,
which is easily parseable using the scanf() runtime function, for
example. The string looks like this:
Input clock: 111111111 Hz, prescaler: 0..16, period 1..65535
This file has read-only access; all the other files can be both read and
written.

The 'scale' file allows reading and writing the prescaler value, it is
functionally equivalent to the TRGGEN_GET_SCALE and TRGGEN_SET_SCALE
ioctls. Likewise, the 'period' file corresponds to TRGGEN_GET_PERIOD /
TRGGEN_SET_PERIOD, and 'edge_pos' to TRGGEN_GET_EDGE_POS /
TRGGEN_SET_EDGE_POS.

Finally, the 'run' file corresponds to TRGGEN_START / TRGGEN_STOP. Write
the string '1' to the file to start the trigger generator, '0' to stop
it.
